import os
import cv2
import json
from pathlib import Path
from tqdm import tqdm


VIDEO_ROOT = Path("/Users/rafael/Factored/surv_gemini3n/experimental/datasets/data/anomalies")
OUTPUT_ROOT = Path("/Users/rafael/Factored/surv_gemini3n/experimental/datasets/data/anomaly_frames")

ANOMALIES_JSON = "anomalies.json" #Previously generated by the EDA.ipynb notebook
IMAGE_EXT = "jpg"
FRAME_RATE = 1  # 1 frame per second


with open(ANOMALIES_JSON, "r") as f:
    anomaly_data = json.load(f)

anomaly_lookup = {
    (entry["event"], entry["video_name"]): (entry["start1"], entry["end1"])
    for entry in anomaly_data
}

def extract_frames(video_path, output_dir, start_frame, end_frame, frame_rate=1):
    """Extract frames from video between start and end frame, at given frame rate."""
    cap = cv2.VideoCapture(str(video_path))
    if not cap.isOpened():
        print(f"⚠️ Could not open {video_path}")
        return

    fps = cap.get(cv2.CAP_PROP_FPS)
    if fps == 0:
        print(f"⚠️ FPS is zero for {video_path}")
        return

    interval = int(fps // frame_rate)
    frame_idx = 0
    saved_idx = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break
        if frame_idx % interval == 0 and start_frame <= frame_idx <= end_frame:
            frame_name = f"{video_path.stem}_{saved_idx:04d}.{IMAGE_EXT}"
            cv2.imwrite(str(output_dir / frame_name), frame)
            saved_idx += 1
        frame_idx += 1

    cap.release()

for (class_name, video_name), (start_frame, end_frame) in tqdm(anomaly_lookup.items(), desc="Extracting anomaly frames"):
    video_path = VIDEO_ROOT / class_name / video_name
    if not video_path.exists():
        print(f"❌ Missing video: {video_path}")
        continue

    output_class_dir = OUTPUT_ROOT / class_name
    output_class_dir.mkdir(parents=True, exist_ok=True)

    extract_frames(video_path, output_class_dir, start_frame, end_frame, FRAME_RATE)
